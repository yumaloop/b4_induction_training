{
  
  "0": {
    "title": "1.はじめに",
    "content": "1.はじめに . 機械学習とは? . 機械学習の定義: . 機械学習(Machine Learning)とは，データに潜む規則や構造を抽出することによって，未知の現象に対する予測やそれに基づく判断を行うための計算技術の総称． . 関連分野としては，パターン認識(Pattern recognition)やデータマイニング(Data mining)があります，これらは目的や歴史的経緯が異なりますが，使われている手法はほぼ同じです. . 機械学習の代表的なタスク . 回帰(Regression) | 分類(Classification) | クラスタリング(Clustering) | 次元削減(Dimensionality reduction) |",
    "url": "http://localhost:4000/docs/ml/1.introductiion.html",
    "relUrl": "/docs/ml/1.introductiion.html"
  }
  ,"1": {
    "title": "1. Numpy",
    "content": "1. Numpy .",
    "url": "http://localhost:4000/docs/python/1.numpy.html",
    "relUrl": "/docs/python/1.numpy.html"
  }
  ,"2": {
    "title": "1. 確率",
    "content": "1. 確率 . 確率とは「ランダムネス（不確実性）の傾向を数学的に記述するもの」であり，統計的推測とは「確率を観測データから推測し知的な確率モデルを構築すること」です． . つまり，統計学は「不確実性を科学するために基本となる数学的な道具を提供」します． . . 1.1 事象と確率 . 曖昧な定義 . 以下の概念を導入する． . 試行(Trial)：実験・観測・調査などの不確かさを伴う行為 | 事象(Event) ：起こりうる試行結果の集まり． | 全事象/標本空間(All events/Sample space) ：起こりうる事象の集まり | . 確率は，事象を区間に対応させる関数である． . . 測度論による定義 . 「確率は，事象 を区間に対応させる関数である．」 . . Q. では事象とは何か？（事象の数学的な性質は？） . A. 事象は可測集合（つまり，可測集合であれば確率を考えることができる） . . 可測集合(Measurable set) 定義：可測集合族 の元 | . | 可測集合族(Measurable family) 定義：以下を満たす集合． . | . | . | . | . | . . よって，確率の測度論による定義は以下のようになる． . ※ 確率とは，測度を正規化(=スケールを[0,1]に揃える)したもの． . . 確率(probability) 定義：可測集合に対する関数で，以下を満たすもの． . | . | 互いに排反な集合 に対して， が成り立つ． | . | . | . . 1.2 条件つき確率と独立 . 独立の定義 . 以下が成り立つとき，「事象と事象は独立である」という． . . 条件付き確率の定義 . 2つの事象に対して， . を「を与えたときのの条件つき確率(conditional probability)」という． . . 全確率の公式(Law of total probability) . 互いに排反な事象に対して，事象の確率は以下のように分解できる． . . ベイズの定理(Bayes rule) . 互いに排反な事象に用いると，条件付き確率は以下のように分解できる． .",
    "url": "http://localhost:4000/docs/stat/1.probability.html",
    "relUrl": "/docs/stat/1.probability.html"
  }
  ,"3": {
    "title": "2.線形回帰",
    "content": "2.線形回帰 . sklearn.datasets ​ sklearn.datasets以下には，7つの簡易データセットが用意されており，データの読み込みが1行で行えます． ​ . load_boston() - Boston House-prices Dataset (回帰). - ボストン市の住宅価格予測 | load_iris() - Iris Dataset (分類). - アヤメの花の品種分類 | load_diabetes() - Diabetes Dataset (回帰). - 糖尿病患者の進行予測 | load_digits() - Digits Dataset (分類). - 手書き数字の画像分類 | load_linnerud() - Linnerud Dataset (回帰). - 生理学的特徴と運動能力の関係性 | load_wine() - Wine Dataset (分類). - ワインの品種分類 | load_breast_cancer() - Breast Cancer Wisconsin Dataset (分類). - 乳がんの判定 | 回帰（Regression）とは? . 以下のような問題設定の下で，変数の推定/予測を行うタスクを「回帰(Regression)」といいます． . 確率変数の実現値からなるコのデータサンプル： . を用いて、の値からの値を推定（予測）するモデル： . を作りたい。 . 回帰問題は，機械学習における最も基本的なタスクであり，その応用先が広いことから様々なモデル・手法が提案されています．また変数の呼び方は分野によって様々で，は「被説明変数・応答変数・目的変数」，は「説明変数・予測変数・独立変数」と呼ばれます． . 線形回帰モデル . また，回帰問題において「関数が多項式」 . 線形モデル(Linear Model, LM) 定義 | . 誤差項が正規分布に従うと仮定 - 一般式 | - 応用例 | 回帰分析(t検定，F検定) | 分散分析(ANOVA) | . | 一般化線形モデル(Generalized Linear Model, GLM) 定義 | . 誤差項$u$が一般の分布に従うと仮定 - 一般式 | - 応用例 | ロジスティック回帰 | ポアソン回帰 | . | 今回のシナリオ . 今回は，ボストン市の住宅価格(TARGET)を目的変数にして線形回帰モデルを作ります.関数$f$は6次元ベクトルから実数値への写像を6元多項式で表しています.は関数では表現できなかった部分を補正する誤差項です． . 具体的には，以下のデータを使います． . 目的変数 (1コ) : TARGET - 住宅価格の中央値（単位: 千ドル） | . | 説明変数 (6コ) : RM - 住居の平均部屋数 | : DIS - 5つのボストン市の雇用施設からの重み付き距離 | : INDUS - 非小売業の土地割合（単位: ％） | : AGE - 1940年より前に建てられた物件割合（単位: ％） | : LSTAT - 低所得労働者の割合（単位: ％） | : CRIM - 人口あたり犯罪発生率（単位: ％） | . | 誤差項　 ： 平均0の正規分布に従うと仮定． | . | .",
    "url": "http://localhost:4000/docs/ml/2.linear_regression.html",
    "relUrl": "/docs/ml/2.linear_regression.html"
  }
  ,"4": {
    "title": "2. Pandas",
    "content": "2. Pandas .",
    "url": "http://localhost:4000/docs/python/2.pandas.html",
    "relUrl": "/docs/python/2.pandas.html"
  }
  ,"5": {
    "title": "2. 確率分布と期待値",
    "content": "2. 確率分布と期待値 . 推測統計学の目的は「観測されたデータからその背後にある確率や確率モデルを推測すること」です．このとき，確率とデータとを結びつけるものが確率変数という概念であり，確率変数の従う分布が確率分布である. . 2.1 確率変数 . 確率は「事象に対して定義される関数」だが，事象を直接扱うよりもそれを要約したものを扱った方が便利な場合がある． . . たとえば，「2つのサイコロを振る」という試行に対して定義される全事象 は，出目の結果となり，事象 はやとなる．しかし，興味があるのは「出目の合計が奇数である確率」や「出目の積が3の倍数となる確率」である．このとき，「出目の合計」や「出目の積」をとおくと扱いやすい．これを確率変数(Random variable)という． . . 確率変数は，全事象から実数への関数と見ることができる． . . 確率関数，確率密度関数 . 確率変数に対する関数を以下のように定義する． . ここでを確率(質量)関数(probability mass function)，を確率密度関数(Probability density function)という． . 関数は，互いに確率変数に対する微積分で表せる． . . 2.2 期待値 . 確率変数の確率分布の特性として平均・分散がある．これは，「{確率変数の関数}の期待値」である． . . 期待値の定義 . 確率変数の関数の期待値(expected value)をで表し，以下のように定義する． . . 確率変数の特性値 . 確率変数と期待値演算を用いて，以下の特性値を定義できる． . の平均(average) ： | . の分散(variance) ： | . の標準偏差(standard deviation)： | . との共分散(Covariance) ： | . との相関係数(Correlation) ： | .",
    "url": "http://localhost:4000/docs/stat/2.variable_and_expectation.html",
    "relUrl": "/docs/stat/2.variable_and_expectation.html"
  }
  ,"6": {
    "title": "3.ロジスティック回帰",
    "content": "3.ロジスティック回帰 . Breast Cancer Wisconsin（Diagnostic）Data Setでロジスティック回帰してみよう . シグモイド関数，ロジット，オッズ . オッズ | オッズ(odds)とは､「ある事象が起こる確率と起こらない確率の比」です．オッズは確率の定義域を，正の実数の範囲に広げます． . . 対数オッズ(ロジット) | オッズを対数変換したものを，対数オッズ(ロジット, logit)といいます．対数オッズは確率の定義域を，実数の範囲に広げます． . . シグモイド関数(ロジスティック関数) | ロジット関数の逆関数を，シグモイド関数(ロジスティック関数)といいます．シグモイド関数は実数全体を確率の定義域へ変換します．また，2クラス分類の場合，クラスラベルをと設定することで，予測ラベルの出力にシグモイド関数を使うことができます． . . ※ Nクラス分類への拡張: ソフトマックス関数 . 2クラス分類では，シグモイド関数を活用することで連続値変数に対する回帰と同じ問題設定をとることができました．同様に，Nクラス分類では，シグモイド関数を拡張したソフトマックス関数が使われます. . ロジスティック回帰 . 今回のシナリオ . 今回は，ボストン市の住宅価格(class)を目的変数にして線形回帰モデルを作ります.関数$f$は4次元ベクトルから実数値への写像を4元多項式で表しています.は関数では表現できなかった部分を補正する誤差項です． 具体的には，以下のデータを使います． . 目的変数 (1コ) : class - 腫瘍の判定結果（悪性: 0, 良性: 1） | . | 説明変数 (4コ) : mean concave points - 細胞にある凹みの平均個数 | : symmetry error - 細胞の左右の非対称性の度合い | : texture error - 細胞表面の明暗の標準偏差 | : 細胞の平均半径 | . | 誤差項　 ： 平均0の正規分布に従うと仮定． | . | .",
    "url": "http://localhost:4000/docs/ml/3.logistic_regression.html",
    "relUrl": "/docs/ml/3.logistic_regression.html"
  }
  ,"7": {
    "title": "3. 代表的な確率分布",
    "content": "3. 代表的な確率分布 . データの背後にある確率モデルを構築するときには，扱う問題に適した確率分布を想定して推測を行うことが望ましい．たとえば，政権の支持に関するデータが取れる場合は，「支持する」を，「支持しない」をとおくことができるのでベルヌーイ分布を想定することになる．すなわち，代表t系な確率分布に対して，分布の形状・平均と分散などの性質を理解ことは重要である． . . 3.1 離散確率分布 . aaa . . . 3.2 連続確率分布 . Aaaa . .",
    "url": "http://localhost:4000/docs/stat/3.prob_distribution.html",
    "relUrl": "/docs/stat/3.prob_distribution.html"
  }
  ,"8": {
    "title": "4. 標本分布とその近似",
    "content": "4. 標本分布とその近似 . 得られたデータから，確率分布の特性値（平均・分散など）に関して推定・検定・信頼区間・予測などの具体的な推測手法を与えて，その推測手法の信頼性を見積もることが統計的推測の目的である．しかし，手元にあるデータ自体は定まった値であり，これをどのように確率分布と関係づけるかが問題となる．そこで，推測統計学では母集団/母分布と標本/標本分布という概念を導入することでこれを解決する．すなわち，母集団/母分布として適当な確率分布や確率モデルを仮定し，標本は母集団/母分布に従う確率変数，観測データは確率変数の実現値と考える． . . 4.1 統計量と標本分布 . 統計学は，目的に応じて記述統計と推測統計に分けることができる． . 記述統計(Descriptive statistics) 目的：データからヒストグラム・箱ひげ図を描いたり，平均・分散などの要約統計量を計算して母集団の特性を調べる | . | 推測統計(Inferential statistics) 目的：母集団に確率モデルを想定し，その確率分布に従う確率変数の実現値としてデータをとらえる． | . | . . ここで，推測統計を行うための概念的な枠組みとして，母集団/母分布と標本/標本分布を導入する．母集団/母分布と標本/標本分布を理解するために，まず以下の例をみてほしい． . . （例1：国勢調査，政権の支持率調査，製品の不良率調査） . これらの統計調査では，母集団が存在するが，母分布は存在しない． . たとえば，政権支持率の値に興味がある場合，母集団(Population)は「有権者全体」になる．このとき，「母集団の要素全てを調査すること＝有権者全員を調査すること」を全数調査(complete survey)という．選挙や国勢調査では全数調査を行う．しかし，コストや速報性の観点から全数調査が現実的ではない場面も多い．そこで，母集団からいくつかの標本(sample)を抽出して，これを基に母集団の推測を行う． . . （例2：コインやサイコロの結果予想，株価予測） . これらの推測問題では，母集団が存在しないが，母分布する（と考える）． . たとえば，表が出る確率がで裏が出る確率がであるコインの出目に興味がある場合，母分布(Population distribution)はベルヌーイ分布となる．このとき，「コインを投げる」という試行は無限に繰り返せるため，全数調査は不可能である．そこで，観測データである「何回かコインを投げた結果」を母分布から抽出された標本(sample)の実現値と考えて，これを基に母集団の推測を行う． . . 次に推測統計の用語を定義する． . . 母集団と母分布 . 母集団(Population) ： 調査したいすべての対象が含まれる集合 | . | 母分布(Population distribution) ： 推測したい変数の従う真の確率分布 | . | . 無作為抽出 . 無作為抽出(Random sampling)： . 乱数などを用いてランダムに標本を抽出すること． | . | 無作為標本(Random sample)： . 無作為抽出によって，抽出された標本(データ)． | . | 独立同分布(Independently and identically distribution) . 確率変数は互いに独立かつ，各が同じ確率分布に従っているとき，「は互いに独立同分布に従う」といい，以下のように記述する． . | . | . 標本と標本分布 . 標本(Sample) ： . 母分布 に従う個の確率変数． | . | 母数(Population parameter) ： . 母分布を決定する定数（パラメータ）や特性値（平均や分散） . 母平均：母分布の平均 . | 母分散：母分布の分散 . | . | . | 統計量(Statistics) ： . 標本 に基づいた関数で，母数 を含まないもの． . 標本平均：標本 の平均 . | 標本分散：標本 の分散 . | . | . | 標本分布(Sample distribution) ： . 統計量の確率分布 | . | . . 代表的な母数 . 確率変数の母平均：母分布の平均 . | 確率変数の母分散：母分布の分散 . | . 代表的な統計量 . 以下の統計量（標本）は， . 確率変数の標本平均(Sample mean) ： . | 確率変数の標本分散(Sample variance) ： . | 確率変数の標本不変分散(Sample invariant variance) ： . | 確率変数のt-統計量(t-statistics) ： . | 確率変数のF-統計量(F-statistics) ： . | . 4.2 正規母集団からの代表的な分布 . Aaaa . . a . 4.3 確率変数と確率分布の収束 . マルコフの不等式(Markov’s inequality) . 非負の確率変数に対して，以下が成り立つ． . （証明） . . チェビシェフの不等式 . 確率変数とその平均と分散に対して，以下が成り立つ． . （証明） . マルコフの不等式で，とおくと， . となる． . . 大数の法則 . 個のランダムサンプル に対して，以下が成り立つ． . （証明） . チェビシェフの不等式より，に対して， . だから，はさみうちの原理より， . となる． . 中心極限定理(Central Limit Theorem, CLT) . 個のランダムサンプル に対して，以下が成り立つ． . すなわち， . （証明） . 略．正規分布の特性関数をTaylor展開して2次近似して，右辺を導出する． .",
    "url": "http://localhost:4000/docs/stat/4.sample_theory.html",
    "relUrl": "/docs/stat/4.sample_theory.html"
  }
  ,"9": {
    "title": "5. 統計的推定",
    "content": "5. 統計的推定 . これまでに準備した統計的推測の枠組みを用いて，統計的推測の具体的な方法を考える．まず統計的推測の一般的な考え方について触れ，データ（情報）の縮約に関する概念である十分統計量(Sufficient statistics)を導入する．次に点推定について述べる．点推定とは「母分布の特性値（平均や分散）を標本データに基づき言い当てる問題」である．点推定量を求める具体的な計算方法として，最尤推定・MAP推定・ベイズ推定を紹介する． . . 5.1 統計的推測 . 「母集団から標本を抽出して，母集団の確率分布や確率モデルについて推測を行うこと」が統計的推測の基本的な考え方である．統計的推測には、目的に応じて「点推定」「区間推定」「仮説検定」「回帰/予測」などがある． . 統計的推測(Statistical inference) . 点推定(Point estimation) 母数 の値を，標本 から求めること． | . | 区間推定(Interval estimation) 母数 が入っている信頼性の高い区間を，標本 から求めること． | . | 仮説検定(Statisical hypothesis testing) 母数 に関する仮説が正しいか否かを，標本 から判定すること． | . | 回帰/予測(Regression/Prediction) 母分布に従う確率変数の新しい実現値を，標本 から求めること． | . | . ここで，統計的推測を行う場合，「推定値の信頼性」「推定の際に生ずる誤差をどう見積もるか」を常に意識する必要がある． . . なお，統計的推測に関する多くの方法は，パラメトリックモデルを対象としている． . パラメトリックモデル(Parametric model) . 確率変数の母分布をとおき，既知の関数と未知の母数 で，母分布を表現する確率モデル．点推定によって，パラメータの値を決定できる． | . | ノンパラメトリックモデル(Non-parametric model) . 確率変数の母分布の関数系が特定されていない確率モデル． | . | . 十分統計量 . 未知母数 で表現される確率分布 に従う確率変数に対して，標本 とその実現値 を考える．このとき，統計量 が未知母数 に対して十分統計量(Sufficient statistics)であるとは，任意の に対して，条件つき確率 がに依存しないことをいう． . すなわち，統計量 が に関する十分統計量であるとは， . 「標本 が持っている に関する情報」 | 「統計量 が持っている に関する情報」 | . が等しいことを意味する． . . 5.2 点推定量の導出 . 点推定(Point estimation)とは，「母分布の特性値（平均や分散）を標本データに基づき言い当てること」である．以下では，パラメトリックモデルを想定し，未知母数をランダムサンプル に基づいて点推定する問題を考える． . . 最尤推定(Maximum likelihood estimation, MLE) . モデル を用いて測った ，ランダムサンプル の同時確率は次式のように表せる． . ランダムサンプル は観測値であり定数だから，これはパラメータ の関数となる．このとき，を尤度関数(Likelihood function)という．また，その対数変換 . を対数尤度関数(Log-likelihood function)という．このとき，尤度関数あるいは対数尤度関数を最大にするパラメータの値 を最尤推定量という． . なお，尤度関数 あるいは対数尤度関数に対して，方程式： . の解がの候補となるため．多くの場合コンピュータによって数値的に導出可能である． . . 事後確率最大化推定(Maximum a posteriori estimation, MAPE) . MAP推定ともいう．モデル に対して，パラメータ の確率分布としてを想定すると，ベイズの定理より次式が成り立つ． . ここで， を「パラメータ の事後分布」， を「パラメータ の事前分布」という．パラメータ の事後確率 の値は，確率モデル と事前分布 を用いて測ったデータサンプル の確からしさ（尤もらしさ）を示す． . このとき，事後確率を最大にするパラメータの値 を最尤推定量という． . ベイズ推定(Bayes estimation, BE) . a . 5.3 推定量の評価 .",
    "url": "http://localhost:4000/docs/stat/5.statistical_inference.html",
    "relUrl": "/docs/stat/5.statistical_inference.html"
  }
  ,"10": {
    "title": "6. 統計的仮説検定",
    "content": "6. 統計的仮説検定 . 得られたデータから，確率分布の特性値（平均・分散など）に関して推定・検定・信頼区間・予測などの具体的 . . 6.1 仮説検定の考え方 . 統計学は，目的に応じて記述統計と推測統計に分けることができる． . 6.2 not yet completed .",
    "url": "http://localhost:4000/docs/stat/6.statistical_test.html",
    "relUrl": "/docs/stat/6.statistical_test.html"
  }
  ,"11": {
    "title": "Bash",
    "content": "Bash . 動作環境：macOS Mojave 10.14.4 . . 1. シェルとは？ . シェル(Shell)とは，OSのカーネルへのアクセスを可能にするために，ユーザインタフェースを提供するソフトウェアの総称です．名前は，OSの内部（カーネル）とユーザ（アプリケーション）との間にある外殻であることに由来します． . . 1.1 シェルコマンド . macOSでは/binの下に，以下のようなシェルコマンドが標準インストールされています． . ~ $ ls -l /bin | grep sh -r-xr-xr-x 1 root wheel 618416 3 21 2019 bash -rwxr-xr-x 1 root wheel 375824 3 21 2019 csh -r-xr-xr-x 1 root wheel 1278736 3 21 2019 ksh -r-xr-xr-x 1 root wheel 618480 3 21 2019 sh -rwxr-xr-x 1 root wheel 375824 3 21 2019 tcsh -rwxr-xr-x 1 root wheel 610240 3 21 2019 zsh . これらはいずれもよく使われているUnixシェルです． . Bourne Shell(sh) Bourne-Again shell (bash) | KornShell (ksh) Z Shell (zsh) | . | . | C Shell(csh) TENEX C shell (tcsh) | . | . 環境変数$SHELLには「現在使っているログインシェルの絶対パス」が登録されています． . ログインシェルとは，「コマンドで指定されない場合に使用するシェル」のこと. . $ echo $SHELL /bin/bash ~/workspace/ml_bootcamp/docs/devops . ログインシェルを変えたい場合は，chshコマンドを使えばOK． . $ chsh -s /bin/zsh # ログインシェルを/bin/bashから/bin/zshへ変更 . シェルコマンドはcdやcatなどの標準コマンドと同様に使えます． . シェル . $ bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin18) Copyright (C) 2007 Free Software Foundation, Inc. $ zsh --version zsh 5.3 (x86_64-apple-darwin18.0) . . 1.2 シェルスクリプトの実行 . 複数のLinuxコマンドをシェルスクリプト(.sh)に記述して，シェルコマンドでこのファイルを実行することができる．例として，test.shというファイルを作り，以下のように記述してみましょう． . #!/bin/sh echo &quot;Hello, World!&quot; . シェルスクリプトの実行方法には2通りあります． . シェルコマンドを使う . $ bash test.sh Hello, World! . | ファイル自体をコマンドとして使う（ファイルの実行権限を追加） . $ chmod 755 test.sh $ ./test.sh Hello, World! . | . . 2. シェルスクリプトの書き方 . 基本的に，初心者向けシェルスクリプトの基本コマンドの紹介(Quitta, 2015,12,12)が非常にわかりやすいです．詳しくはAsk google!してください． . . コメント . #でコメントアウトできます . . 入出力 . echoで出力、 readで入力です． . io.shというファイルを作り，以下のように記述してみよう． . #!/bin/sh read NAME echo &quot;Hello, $NAME! How are you?&quot; . 実行するとreadで入力待ち状態になります． . 実行結果 . $ bash io.sh Michita Hello, Michita! How are you? . . 変数 . 変数の名前として半角英数字とアンダーバーが使えます．（”a~z”，”A~Z”，”0~9”，”_*“） | 変数に値を与える時，=を前後空白なしで書きます．文字列の場合&quot;で囲みます． | 変数をアクセスする時，変数名の前に$を入れます．あるいは変数を${}で囲みます． | . また，以下の変数は，特別な意味を持ちます．特に引数を表す$1~9はよく使うので注意． . 変数 機能 . $0 | スクリプト名 | . $1~$9 | 引数．1番目の引数を$1，2番目の引数を$2でアクセスする | . $# | スクリプトに与えた引数の数 | . $* | 全部の引数をまとめて1つとして処理 | . $@ | 全部の引数を個別として処理 | . $? | 直前実行したコマンドの終了値（0は成功、1は失敗） | . $$ | このシェルスクリプトのプロセスID | . $! | 最後に実行したバックグラウンドプロセスID | . * ? [ &#39; &quot; $ ; &amp; ( ) | ~ &lt; &gt; # % = スペース タブ 改行　はシェルスクリプトの特殊文字です．文字列として使うときは を書いてから使います． . . 演算子 . 算術演算子をexpr `数字 算術演算子 数字`で計算できます． . 算術演算子 意味 例 . + | 加 | echo `expr 10 + 20` =&gt; 30 | . - | 減 | echo `expr 20 - 10` =&gt; 10 | . * | 乗 | echo `expr 11 * 11` =&gt; 121 | . / | 割 | echo `expr 10 / 2` =&gt; 5 | . % | 剰余 | echo `expr 10 % 4` =&gt; 2 | . = | 指定 | a= $b bの値はaに保存される． | . == | 等 | [ “$a” == “$b” ] $aと$bが同じ値の場合TRUEを返す． | . != | 不等 | [ “$a” != “$b” ] $aと$bが同じ値ではない場合TRUEを返す． | . 比較演算子で条件式を作ることができます． . 比較演算子 意味 例 . -eq | equal | [ &quot;$a&quot; -eq &quot;$b&quot; ] $aと$bが同じ場合TRUEを返す． | . -ne | not equal | [ &quot;$a&quot; -ne &quot;$b&quot; ] $aと$bが違い場合TRUEを返す． | . -gt | &gt; | [ &quot;$a&quot; -gt &quot;$b&quot; ] $aが $bより大きい場合TRUEを返す． | . -lt | &lt; | [ &quot;$a&quot; -lt &quot;$b&quot; ] $aが $bより小さい場合TRUEを返す． | . -ge | &gt;= | [ &quot;$a&quot; -ge &quot;$b&quot; ] $aが $bより大きいか同じ場合TRUEを返す． | . -le | &lt;= | [ &quot;$a&quot; -le &quot;$b&quot; ] $aが $bより小さいか同じ場合TRUEを返す． | . ! | NOT | [ ! &quot;$a&quot; -gt &quot;$b&quot; ] $aが $bより大きくない場合TRUEを返す． | . -o | OR | [ &quot;$a&quot; -gt &quot;$b&quot; -o &quot;$a&quot; -lt &quot;$b&quot; ] aがbより大きいか小さい場合TRUEを返す． | . -a | AND | [ &quot;$a&quot; -gt 3 -a &quot;$a&quot; -lt 10 ] aが 3より大きく10より小さい場合TRUEを返す． | . . . 条件分岐 . . if文 . if文を使ったシェルスクリプトを描いてみましょう． . ifの基本の書き方は if [条件式] then コマンド fi です． | 条件が真の場合 then の次のコマンドを実行します． | 違う場合次々の elif [ 条件 ] を確認します． | 真の条件がない場合 else の次のコマンドを実行して終了します． | else がない場合は、そのまま終了します． | . #!/bin/sh a=10 b=300 if [ &quot;$a&quot; -gt &quot;$b&quot; ] # 条件1 then # 条件1がTrue echo &quot;a &gt; b&quot; elif [ &quot;$a&quot; -eq &quot;$b&quot; ] # 条件2 then # 条件1がFalseかつ条件2がTrue echo &quot;a = b&quot; else # 条件1がFalseかつ条件2がFalse echo &quot;a &lt; b&quot; fi . switch文 . switchの基本の書き方は case 変数 in 条件・値) コマンド ;; esac です． | 条件・値が変数と合う場合それの次のコマンドを実行します． | . #!/bin/sh EDITOR=&quot;vim&quot; case &quot;$EDITOR&quot; in &quot;emacs&quot;) echo &quot;Bad.&quot; ;; &quot;vscode&quot;) echo &quot;Not bad.&quot; ;; &quot;vim&quot;) echo &quot;Awesome!&quot; ;; esac . . ループ表現 . . while文 . whileの基本の書き方は while [条件式] do コマンド done です． | whileは，条件が満たされる限りループします． | . #!/bin/sh a=0 while [ $a -lt 5 ] do echo $a a=`expr $a + 1` done . 実行結果 . $ ./while.sh 0 1 2 3 4 . . until文 . untilの基本の書き方は until [条件式] do コマンド done です． | untilは，条件が満たされるまでループします． | . #!/bin/sh a=0 until [ ! $a -lt 5 ] do echo $a a=`expr $a + 1` done . 実行結果 . $ ./until.sh 0 1 2 3 4 . . for文 . forの基本の書き方は for 変数 in 複数値・変数・範囲 do コマンド done です． | . #!/bin/sh for var in 0 1 2 3 4 do echo $var done . 実行結果 . $ ./for.sh 0 1 2 3 4 . . . 環境変数 . シェルコマンド、およびシェルスクリプトは環境変数を利用できます．printenvコマンドで現在定義されている環境変数を一覧表示できます． . $ printenv TERM_PROGRAM=Apple_Terminal SHELL=/bin/bash TERM=xterm-256color TMPDIR=/var/folders/g5/zbwwk4dn47xgsc999xby2j8h0000gp/T/ Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.bpYdGvp7OP/Render TERM_PROGRAM_VERSION=421.1.1 TERM_SESSION_ID=5172A6DD-C88E-4072-A585-1CC1D61D3D42 USER=uchiumi SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.Kr3cIp1TAV/Listeners ... . シェル変数はいつまでも入れておくことができません．いま起動しているシェルを終了してしまうと失われてしまいます．そのシェル変数を環境変数にすることで、いつ何度でもシェルを起動するたびに使えます． . export コマンドを使い、シェル変数を環境変数として設定します． . $ export LAB=&quot;imai lab&quot; $ printenv ... LAB=imai lab . . . 参考文献 . 初心者向けシェルスクリプトの基本コマンドの紹介 - Quitta, 2015.12.12 | .",
    "url": "http://localhost:4000/docs/devops/bash.html",
    "relUrl": "/docs/devops/bash.html"
  }
  ,"12": {
    "title": "Buttons",
    "content": "Buttons . . Basic button styles Links that look like buttons | Button element | | Using utilities with buttons Button size | Spacing between buttons | | . Basic button styles . Links that look like buttons . Link button . Link button Link button Link button . Link button . [Link button](http://example.com/){: .btn } [Link button](http://example.com/){: .btn .btn-purple } [Link button](http://example.com/){: .btn .btn-blue } [Link button](http://example.com/){: .btn .btn-green } [Link button](http://example.com/){: .btn .btn-outline } . Button element . GitHub Flavored Markdown does not support the button element, so you’ll have to use inline HTML for this: . Button element &lt;button type=&quot;button&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;Button element&lt;/button&gt; . . Using utilities with buttons . Button size . Wrap the button in a container that uses the font-size utility classes to scale buttons: . Big ass button . Tiny ass button . &lt;span class=&quot;fs-8&quot;&gt; [Link button](http://example.com/){: .btn } &lt;/span&gt; &lt;span class=&quot;fs-3&quot;&gt; [Tiny ass button](http://example.com/){: .btn } &lt;/span&gt; . Spacing between buttons . Use the margin utility classes to add spacing between two buttons in the same block. . Button with space Button . Button with more space Button . [Button with space](http://example.com/){: .btn .btn-purple .mr-2 } [Button ](http://example.com/){: .btn .btn-blue } [Button with more space](http://example.com/){: .btn .btn-green .mr-4 } [Button ](http://example.com/){: .btn .btn-blue } .",
    "url": "http://localhost:4000/docs/jekyll/ui-components/buttons.html",
    "relUrl": "/docs/jekyll/ui-components/buttons.html"
  }
  ,"13": {
    "title": "Code",
    "content": "Code . . Inline code | Syntax highlighted code blocks | Code blocks with rendered examples | . Inline code . Code can be rendered inline by wrapping it in single back ticks. . Lorem ipsum dolor sit amet, &lt;inline code snippet&gt; adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. . Lorem ipsum dolor sit amet, `&lt;inline code snippet&gt;` adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. . . Syntax highlighted code blocks . Use Jekyll’s built-in syntax highlighting with Rouge for code blocks by using three backticks, followed by the language name: . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . js // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . . Code blocks with rendered examples . To demonstrate front end code, sometimes it’s useful to show a rendered example of that code. After including the styles from your project that you’ll need to show the rendering, you can use a &lt;div&gt; with the code-example class, followed by the code block syntax. If you want to render your output with Markdown instead of HTML, use the markdown=&quot;1&quot; attribute to tell Jekyll that the code you are rendering will be in Markdown format… This is about to get meta… . Link button . [Link button](http://example.com/){: .btn } . &lt;div class=&quot;code-example&quot; markdown=&quot;1&quot;&gt; [Link button](http://example.com/){: .btn } &lt;/div&gt; markdown [Link button](http://example.com/){: .btn } .",
    "url": "http://localhost:4000/docs/jekyll/ui-components/code.html",
    "relUrl": "/docs/jekyll/ui-components/code.html"
  }
  ,"14": {
    "title": "Color",
    "content": "Color Utilities . . Light Greys | Dark Greys | Purples | Blues | Greens | Yellows | Reds | . All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. . Light Greys . Color value Font color utility Background color utility . grey-lt-000 | .text-grey-lt-000 | .bg-grey-lt-000 | . grey-lt-100 | .text-grey-lt-100 | .bg-grey-lt-100 | . grey-lt-200 | .text-grey-lt-200 | .bg-grey-lt-200 | . grey-lt-300 | .text-grey-lt-300 | .bg-grey-lt-300 | . Dark Greys . Color value Font color utility Background color utility . grey-dk-000 | .text-grey-dk-000 | .bg-grey-dk-000 | . grey-dk-100 | .text-grey-dk-100 | .bg-grey-dk-100 | . grey-dk-200 | .text-grey-dk-200 | .bg-grey-dk-200 | . grey-dk-250 | .text-grey-dk-250 | .bg-grey-dk-250 | . grey-dk-300 | .text-grey-dk-300 | .bg-grey-dk-300 | . Purples . Color value Font color utility Background color utility . purple-000 | .text-purple-000 | .bg-purple-000 | . purple-100 | .text-purple-100 | .bg-purple-100 | . purple-200 | .text-purple-200 | .bg-purple-200 | . purple-300 | .text-purple-300 | .bg-purple-300 | . Blues . Color value Font color utility Background color utility . blue-000 | .text-blue-000 | .bg-blue-000 | . blue-100 | .text-blue-100 | .bg-blue-100 | . blue-200 | .text-blue-200 | .bg-blue-200 | . blue-300 | .text-blue-300 | .bg-blue-300 | . Greens . Color value Font color utility Background color utility . green-000 | .text-green-000 | .bg-green-000 | . green-100 | .text-green-100 | .bg-green-100 | . green-200 | .text-green-200 | .bg-green-200 | . green-300 | .text-green-300 | .bg-green-300 | . Yellows . Color value Font color utility Background color utility . yellow-000 | .text-yellow-000 | .bg-yellow-000 | . yellow-100 | .text-yellow-100 | .bg-yellow-100 | . yellow-200 | .text-yellow-200 | .bg-yellow-200 | . yellow-300 | .text-yellow-300 | .bg-yellow-300 | . Reds . Color value Font color utility Background color utility . red-000 | .text-red-000 | .bg-red-000 | . red-100 | .text-red-100 | .bg-red-100 | . red-200 | .text-red-200 | .bg-red-200 | . red-300 | .text-red-300 | .bg-red-300 | .",
    "url": "http://localhost:4000/docs/jekyll/utilities/color.html",
    "relUrl": "/docs/jekyll/utilities/color.html"
  }
  ,"15": {
    "title": "Configuration",
    "content": "Configuration . Just the Docs has some specific configuration parameters that can be defined in your Jekyll site’s _config.yml file. . . Site logo | Search | Aux links | Heading anchor links | Footer content | Color scheme | Google Analytics | . View this site’s _config.yml file as an example. . Site logo . # Set a path/url to a logo that will be displayed instead of the title logo: &quot;/assets/images/just-the-docs.png&quot; . Search . # Enable or disable the site search # Supports true (default) or false search_enabled: true # Enable support for hyphenated search words: search_tokenizer_separator: /[ s/]+/ . Aux links . # Aux links for the upper right navigation aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/pmarsceill/just-the-docs&quot; . Heading anchor links . # Heading anchor links appear on hover over h1-h6 tags in page content # allowing users to deep link to a particular heading on a page. # # Supports true (default) or false/nil heading_anchors: true . Footer content . # Footer content appears at the bottom of every page&#39;s main content footer_content: &quot;Copyright &amp;copy; 2017-2019 Patrick Marsceill. Distributed by an &lt;a href= &quot;https://github.com/pmarsceill/just-the-docs/tree/master/LICENSE.txt &quot;&gt;MIT license.&lt;/a&gt;&quot; . Color scheme . # Color scheme currently only supports &quot;dark&quot; or nil (default) color_scheme: &quot;dark&quot; . Preview dark color scheme . See Customization for more information. . Google Analytics . # Google Analytics Tracking (optional) # e.g, UA-1234567-89 ga_tracking: UA-5555555-55 .",
    "url": "http://localhost:4000/docs/jekyll/configuration.html",
    "relUrl": "/docs/jekyll/configuration.html"
  }
  ,"16": {
    "title": "CUDA&cuDNN",
    "content": "CUDAおよびcuDNNの設定 . GPU . GPUデバイスの確認 . lswsコマンドを使う . $ sudo lshw -C display *-display 詳細: VGA compatible controller 製品: GP104 [GeForce GTX 1080] ベンダー: NVIDIA Corporation 物理ID: 0 バス情報: pci@0000:01:00.0 バージョン: a1 幅: 64 bits クロック: 33MHz 性能: pm msi pciexpress vga_controller bus_master cap_list rom 設定: driver=nvidia latency=0 リソース: irq:317 メモリー:de000000-deffffff メモリー:c0000000-cfffffff メモリー:d0000000-d1ffffff IOポート:e000(サイズ=128) メモリー:df000000-df07ffff . lspciコマンドを使う . Linuxに搭載されているPCIバスの情報を表示する． . $ lspci | grep -i nvidia 01:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1) 01:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1) . NVIDIAドライバとCUDA/cuDNNの導入 . NVIDIAドライバのインストール . 1.下記リンクから，自分のGPUにあうドライバを検索してダウンロードする． . https://www.nvidia.co.jp/Download/index.aspx?lang=jp . . たとえば，GPU「NVIDIA GeForce 1080」に対応したドライバは以下のようになる． . ． . 2. 新しくGPUドライバ（NVIDIAドライバ）をインストールする前に，既にインストールされているGPUドライバを確認する． . # マシンにインストール済みのNVIDIAドライバを一覧表示 $ dpkg -l | grep nvidia ii nvidia-418 418.87.01-0ubuntu1 amd64 ... ii nvidia-418-dev 418.87.01-0ubuntu1 amd64 ... ii nvidia-modprobe 418.87.01-0ubuntu1 amd64 ... ii nvidia-opencl-icd-418 418.87.01-0ubuntu1 amd64 ... ii nvidia-prime 0.8.2 amd64 ... ii nvidia-settings 418.87.01-0ubuntu1 amd64 ... # apt-getでインストールできるNVIDIAドライバの一覧表示 $ apt-cache search &quot;^nvidia-[0-9]{3}$&quot; nvidia-331 - Transitional package for nvidia-331 nvidia-346 - Transitional package for nvidia-346 nvidia-340 - NVIDIA binary driver - version 340.107 ... nvidia-440 - NVIDIA binary driver - version 440.33.01 nvidia-304 - NVIDIA legacy binary driver - version 304.137 nvidia-415 - NVIDIA binary driver - version 415.27 nvidia-430 - NVIDIA binary driver - version 430.64 . aptにNVIDIAドライバを提供しているxorg-edgersレポジトリを追加する． . $ sudo add-apt-repository ppa:xorg-edgers/ppa -y $ sudo apt-get update . aptでNVIDIAドライバ「nvidia-396」をインストールして，マシンを再起動． . # aptコマンドでドライバnvidia-396をインストール $ sudo apt-get install -y nvidia-396 # マシンを再起動 $ sudo reboot . . CUDAのインストール . （注意）CUDA・cuDNN・tensorFlow-gpuのバージョンを合わせる必要がある． . 1. CUDAの公式ドキュメントをよく読む． . CUDA Toolkit Documentation https://docs.nvidia.com/cuda/index.html | . 2. 下記リンクから，NVIDIAドライバに対応するCUDAのバージョンを確認する . CUDA Toolkit Documentation &gt; Release Notes &gt; 1. CUDA Toolkit Major Components &gt; CUDA Driver https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html | . . 3. 下記リンクから，tensorflow-gpuに対応するcuDNN/CUDAのバージョンを確認する . TensorFlow (Linux) - テスト済みのビルド設定 | . https://www.tensorflow.org/install/source#linux . . CUDA・cuDNN・tensorFlow-gpuのバージョン確認を終えた． . 今回は，以下で環境構築をする． . Python 3.6.9 | tensorflow-gpu 1.13.1 | CUDA 10.0 | cuDNN 7.4 | . 4. 下記リンクから，自分の環境にあった「CUDA Toolkitパッケージ」を確認し，マシンへダウンロードする． . CUDA Toolkit Archive https://developer.nvidia.com/cuda-toolkit-archive | . . 今回は，CUDA10.0で，マシンの環境として，以下を選択． . Operating System: Linux | Architecture: x86_64 | Distribution: Ubuntu | Version: 16.04 | Installer Type: deb [network] | . . （注意）https://developer.nvidia.com/cuda-downloadsは，最新バージョンのダウンロードリンクなので，ここから安易にCUDAをダウンロードしてはいけない．特に，tensorflow-gpuは，最新のCUDA Toolkitに対応していないので注意する．CUDAとTensorflow-gpuのバージョンがあっていないと，たとえばImportError: libcublas.so.10.0が発生する． . 対応するCUDA Toolkit（CUDA 10.0）の.debファイル(network)は「cuda-repo-ubuntu160410.0.130-1amd64.deb」となる． この.debファイルをwgetコマンドを使って，マシンへダウンロードする． . # wgetコマンドでCUDA Toolkitのパッケージファイルをダウンロード $ wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_10.0.130-1_amd64.deb ... `cuda-repo-ubuntu1604_10.0.130-1_amd64.deb’ に保存中 cuda-repo-ubuntu1604_10.0.130-1_amd64.deb 100%[==========================&gt;] 2.77K --.-KB/s 時間 0s 2019-05-11 16:54:30 (308 MB/s) - `cuda-repo-ubuntu1604_10.0.130-1_amd64.deb’ へ保存完了 [2840/2840] . # .debファイル（CUDA Toolkitのパッケージファイル）を確認 $ ls | grep cuda-repo-ubuntu1604_10.0.130-1_amd64.deb cuda-repo-ubuntu1604_10.0.130-1_amd64.deb . . 5. ダウンロードしたCUDA Toolkitパッケージ(.deb)を，マシンへインストールする . dpkgコマンドでCUDA Toolkitパッケージ(.deb)をcudaパッケージとして保存します．さらに，aptコマンドでcudaパッケージをインストールします． 注意：公式に書かれているsudo apt-get install cudaを実行すると自動的に最新版のCUDAがインストールされる． . # CUDA Toolkit（CUDA 10.0）をマシンにインストールする $ sudo dpkg -i cuda-repo-ubuntu1604_10.0.130-1_amd64.deb $ sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub $ sudo apt-get update $ sudo apt-get install cuda-10-0 . これでCUDA Toolkit（CUDA 10.0）のインストールは完了． . 次に，環境変数（PATH）を設定する． . cuDNNのインストール . PATHチェック .",
    "url": "http://localhost:4000/docs/nvidia-gpu/cudacudnn.html",
    "relUrl": "/docs/nvidia-gpu/cudacudnn.html"
  }
  ,"17": {
    "title": "Customization",
    "content": "Customization . . Color schemes | Specific visual customization | Override styles | . Color schemes . New . Just the Docs supports two color schemes: light (default), and dark. . To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: . Example . # Color scheme currently only supports &quot;dark&quot; or nil (default) color_scheme: &quot;dark&quot; . Preview dark color scheme . Specific visual customization . To customize your site’s aesthetic, open _sass/custom/custom.scss in your editor to see if there is a variable that you can override. Most styles like fonts, colors, spacing, etc. are derived from these variables. To override a specific variable, uncomment its line and change its value. . For example, to change the link color from the purple default to blue, open _sass/custom/custom.css and find the $link-color variable on line 50. Uncomment it, and change its value to our $blue-000 variable, or another shade of your choosing. . Example . // ... // // $body-text-color: $grey-dk-100; // $body-heading-color: $grey-dk-300; $link-color: $blue-000; // // ... . Note: Editing the variables directly in _sass/support/variables.scss is not recommended and can cause other dependencies to fail. . Override styles . For styles that aren’t defined as a variables, you may want to modify specific CSS classes. To add your own CSS overrides at the end of the cascade, edit _sass/overrides.scss. This will allow for all overrides to be kept in a single file, and for any upstream changes to still be applied. . For example, if you’d like to add your own styles for printing a page, you could add the following styles. . Example . // Print-only styles. @media print { .side-bar, .page-header { display: none; } .main-content { max-width: auto; margin: 1em;} } .",
    "url": "http://localhost:4000/docs/jekyll/customization.html",
    "relUrl": "/docs/jekyll/customization.html"
  }
  ,"18": {
    "title": "DevOps",
    "content": "DevOps . DevOpsツールの紹介． .",
    "url": "http://localhost:4000/docs/devops",
    "relUrl": "/docs/devops"
  }
  ,"19": {
    "title": "深層学習",
    "content": "深層学習 . 深層学習入門です． . ゼロからはじめるDeepLearning | .",
    "url": "http://localhost:4000/docs/dl",
    "relUrl": "/docs/dl"
  }
  ,"20": {
    "title": "Docker",
    "content": "Docker . . Dockerとは？ . コンテナ型の仮想環境を作成、配布、実行するためのプラットフォーム．要するに仮想環境の一種（厳密には違う）． . . 従来の仮想環境との差異 . コード化されたファイルを共有することで、どこでも誰でも同じ環境が作れる | 作成した環境を配布しやすい 環境をファイルにして保存できる | . | スクラップ＆ビルドが容易にできる コマンド一つで作れたり消したり | . | . . . イメージとコンテナ . イメージ：アプリケーションの実行環境の雛形 | コンテナ：アプリケーションの実行環境(実体) | イメージをベースにしてコンテナを作成 | . . Dockerの導入 . 公式からインストーラを落とす方法 . https://docs.docker.com/docker-for-mac/install/ から | . | homebrewを使う方法（macOS） . $ brew install docker $ brew cask install docker . | . . チュートリアル . イメージのダウンロード . docker pull 取得するイメージ名:タグで，Docker Hub(後述)からイメージを引っ張ってくる． . 例：Ubuntuの最新バージョンのイメージをダウンロード． . $ docker pull ubuntu:latest . 保存してあるイメージの一覧表示 . $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest 47b19964fb50 1 months ago 88.1MB . コンテナの起動 . 基本的に，docker run イメージ名で，イメージをベースにしてコンテナを作成(起動) . $ docker run ubuntu . これだとコンテナが起動してすぐ停止する． . →オブションをつける . $ docker run -it ubuntu . オプション -i：ホスト側からコンテナ側への入力を認める | -t：コンテナ側からホスト側への入力を認める | . | . 起動しているコンテナの一覧表示 . $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 446e676e86b1 ubuntu:latest &quot;ls&quot; 11 months ago Exited (0) 11 months ago condescending_archimedes f2f13fd09819 ubuntu:latest &quot;/bin/bash&quot; 11 months ago Exited (255) 11 months ago vibrant_liskov . オプション . -a：停止してるコンテナも表示 | . コンテナの停止・再開 . コンテナ側で，「Ctrl + P + Q」でコンテナからログアウト(停止, detach)する． . ホスト側で，docker attach コンテナIDで，コンテナへログイン(再開, attach)する． . $ docker attach 94b9e29221aa . あるいは， . $ docker exec -it 94b9e29221aa /bin/bash . . nvidia-docker . DockerでNVIDIA社製のGPUを使いたいときに用いる . Macbookに搭載されているGPUはNVIDIA社製ではない． . | NVIDIA-GPUが搭載されたLinuxマシンで使う． . GPUは機械学習で使うモデルの学習に使う． | AWS EC2, GCP VM, MS AzureなどのクラウドマシンではNVIDIA-GPUを提供 | . | . . Docker Hub . https://hub.docker.com/ . 様々なイメージがあるサイト | 取得したいイメージを検索 | 自分で作ったイメージをアップロードも可能 | . docker pull 取得したいイメージのリポジトリ名で，イメージをダウンロード可能． . Dockderfile . イメージを作成するための設定ファイル | 用いるイメージや実行するコマンドなどを記述 | . コマンドでDockerfileからイメージを作成 . docker build &lt;Dockerfileのパス&gt; -t &lt;コンテナ名&gt;で，イメージを作成可能． . $ docker build ./ -t example_container . !!! docker build . https://docs.docker.com/engine/reference/commandline/build/] | . . 参考文献 . Docker Documentation (日本語) | Docker Documentation | .",
    "url": "http://localhost:4000/docs/devops/dockder.html",
    "relUrl": "/docs/devops/dockder.html"
  }
  ,"21": {
    "title": "Git",
    "content": "Git . gitは，ソースコードなどの変更履歴を記録・追跡できる分散型バージョン管理システムです． . . 導入 . Gitのインストール . macOSには標準でgitがインストールされています． . $ which git /usr/bin/git $ git --version git version 2.17.1 (Apple Git-112) . 不具合があれば，下記サイトを参考にgitをインストールしてください． . https://tracpath.com/bootcamp/git-install-to-mac.html . Gitの設定 . Gitをインストールしたときに最初にすべきことは，「ユーザ名とEmailアドレス」を設定することです．全てのGitのコミットはこの情報を用いるため，作成するコミット(後述)でこの情報が参照されます． . $ git config --global user.email &quot;you@example.com&quot; $ git config --global user.name &quot;Your Name&quot; . Githubアカウントの作成 . https://github.com/ へアクセスして，Username・Email・Passwordを入力して「Sign up for GitHub」をクリックすれば完了です． . 入門編: インデックス・コミット・リポジトリ . よく使うコマンドは，こんな感じ． . $ git init # 1.初期化(.git作成) $ git add . # 2.変更情報をインデックスに追加 $ git commit -m &quot;edit foo.html&quot; # 3.コミットを作成 $ git remote add origin {Remote Repository URL} # 4. リモートリポジトリを追加 $ git push -u origin master # 5.コミットをリモートリポジトリorigin/masterへプッシュ . git init | コマンドの通り，初期化(initialize)をしています．「git initを実行したディレクトリ以下のファイルをGitで管理をする」ために色々下準備をしてくれます(.gitという隠しディレクトリができて、そこにメタ情報が追加されてます)． . git add &lt;filepath&gt; | Gitにはインデックス(Index)という，「どのファイルを管理対象にするかを記録するエリア」があります．git addはインデックスにファイルやディレクトリを追加(add)するためのコマンドです．いくらファイルを編集しても，git addをしなくては編集内容がインデックスに反映されず、git commitをしても編集されていないと怒られてしまいます．git add .を使うのかgit add -uを使うのかgit add -Aを使うのかについてはこちらが参考になります． . git commit -m &quot;Commit message&quot; | Gitを利用するにあたって，最重要と言ってもいいコマンドです(個人の感想)．コミット(Commit)という概念がGitでは非常に重要です． . コミット(Commit)とは「ディレクトリやファイルの追加・変更・削除等を記録したひとかたまりのこと」をいいます．別の言い方をすると，git addでインデックスに追加された変更をログとして記録しているものです．git commitをした時点の最新インデックスと，一つ前のcommitを比較し，変更点を記録します．このcommitを元に、過去のある時点の状態に戻したりすることができるのです．各commitには、メッセージ(メモ的なもの)を付与することができます．commitにはIDが自動的に付与されるのですが，それを見ただけでは当然変更点はわかりません．また，差分(ファイルの変更箇所)を確認することができても，その差分が一体何を意味しているのかをひと目見て把握することは非常に困難です． . 何か不具合が見つかり過去のcommitに状態を戻すときなど，過去のcommitを見返したときにメッセージを見て大まかに把握できるようにしましょう．わかりやすいcommitメッセージを書くコツは「定型的で簡潔」に書くことです．実際にどのようにどんな単語を使って書けばいいのかはこちらの記事がよくまとまっていますので，一度目を通しておくことをオススメします．最初のうちは理由や説明を書くのがの難しいと思うので，一行目の概要を書くだけで十分だと思います． . (いまいちしっくりこないって方はこちらを見るなりググるなりしてください) . git remote add origin {Remote Repository URL} | このコマンドは普通最初以外出てこないので，ほぼ「魔法の呪文」みたく丸暗記している方も多いと思います．しかし，このコマンドはGitをネットワーク上で管理するのに不可欠なコマンドであり，軽く見ているといつか痛い目にあいます． . Gitでは管理する一つの塊をリポジトリ(Repository)といいます．管理したいリポジトリはもちろんローカルだけで管理することもできますが，それをネットワーク上にアップロードして、リモートで管理することもできます．本来，ネットワーク上でRepositoryを管理するにはそれ用のサーバが必要ですが，GitHubは 無償 でRepositoryを保存する領域を提供してくれています．その リモート先のURLを情報として追加するためのコマンド がgit remote addです． . URLの前にoriginとありますが，これは一体何者でしょうか？originの位置に指定する単語は，リモートリポジトリ URLを格納する 変数名 です(毎回URLを入力するのは面倒くさい)． . git push -u origin master | ローカルで作成したコミット(Commit)をネットワーク上(Githubのサーバ上)のリモートリポジトリに反映させるには，git pushコマンドを実行する必要があります．「リモートリポジトリに最新のコミットを反映させる」コマンドがgit pushになります． . 発展編: ブランチ . git push -u origin masterを見たときに，git pushやoriginは理解できたけどmasterって何？uオプションはなにを意味するの？という疑問が出てきます． . 「最新のcommitを指すポインタ的なもの」がHEADです．HEADをみたら最新のcommitのことなんだなと思いましょう．そして，あるcommitを指す変数を ブランチ(Branch) といいます．masterはGitが最初から用意しているbranchです．branchはいくつでも作ることができます．ブランチについて，詳しくはこちらを参照してください． . . 試しにgit branch hogeとしてbranchを作成してみましょう．git branchとすることで今ローカルにあるbranchが確認できます． . $ git branch hoge $ git branch hoge * master . 「*」がついているのが現在のbranchです．現在のbranchが指しているcommitをRemote RepositoryへPushします．だからgit push origin masterなのです．branchを切り替えるにはgit checkout hogeとします． . $ git checkout hoge Switched to branch &#39;hoge&#39; $ git branch * hoge master . では，branchを変えることにはどのような利点があるのでしょうか？ . たとえばhogeでファイルAを追加して何か編集して，commitを作成します．その後にmasterへ戻ると，さきほど作成・編集をしたファイルAが消えてます．なぜなら，masterはファイルAに関するcommitを作成する前のcommitを指しているからです．masterが指しているcommitにはファイルAの存在自体がないので、切り替えたら消えるというのは当然といえば当然です． . hogeの内容をmasterに反映させるにはどうすればよいのでしょうか？git merge hogeというふうにすれば解決です．このコマンドは，hogeを作成した(masterから分岐させた)ときから，hogeが指してきたcommit達をmasterに取り込む(マージ)コマンドです．git merge hogeを行うとき，まずgitはmasterが指しているcommitとhogeが指しているcommitを比較したあと，色々整合させるための処理をして， ひとつのcommit を作成します。mergeをしたときに作成されたcommitを merge commit と呼びます．そして，mergeが完了したらRemote RepositoryへPushしてあげましょう． . 当然別々の歴史を持っているので，同じ箇所を編集してしまっていたということもあるでしょう．同じ箇所を編集していて，mergeできない状態を コンフリクト(Conflict)を起こした といいます．conflictが起こった場合は，その部分を手動で修正し，git addでインデックスに編集内容を追加します．その後、commitを作成します．conflictを起こすと，Gitはmerge commitを作成してくれません．あとはそのcommitをPushして終了です． . Gitの抽象概念まとめ . インデックス(Index) . どのファイルを管理対象にするかを記録するエリア | . | コミット(Commit) . ディレクトリやファイルの変更(追加・編集・削除)を記録したひとかたまり . | すべてのコミットは，IDとCommit Messageをもつ． | Gitのバージョン管理はブランチとコミットを基に行う， | . | ブランチ(Branch) . あるcommitを指す変数 | コミット(=変更履歴)の流れを分岐して記録していくためのもの チェックアウト：ブランチを切り替えること． | マージ：2つのブランチを統合すること． | コンフリクト：マージ時に変更内容が重複した場合に生じるエラー | . | . | リポジトリ(Repository) . Gitでバージョン管理するデータのひとかたまり． | ローカルサーバ上にあるリポジトリを「ローカルリポジトリ」という | リモートサーバ上にあるリポジトリを「リモートリポジトリ」という | . | . 参考文献 . Pro Git (written by Scott Chacon and Ben Straub) | サルでもわかるGit入門 . | 何も考えずにGitでaddしてcommitしてpushしてるだけのあなたへ | .",
    "url": "http://localhost:4000/docs/devops/git.html",
    "relUrl": "/docs/devops/git.html"
  }
  ,"22": {
    "title": "Markdown kitchen sink",
    "content": "Text can be bold, italic, or strikethrough. . Link to another page. . There should be whitespace between paragraphs. . There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. . Header 1 . This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. . Header 2 . This is a blockquote following a header. . When something is important enough, you do it even if the odds are not in your favor. . Header 3 . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, &quot;= #{version}&quot;) end . Header 4 . This is an unordered list following a header. | This is an unordered list following a header. | This is an unordered list following a header. | . Header 5 . This is an ordered list following a header. | This is an ordered list following a header. | This is an ordered list following a header. | Header 6 . head1 head two three . ok | good swedish fish | nice | . out of stock | good and plenty | nice | . ok | good oreos | hmm | . ok | good zoute drop | yumm | . There’s a horizontal rule below this. . . Here is an unordered list: . Item foo | Item bar | Item baz | Item zip | . And an ordered list: . Item one | Item two | Item three | Item four | And a nested list: . level 1 item level 2 item | level 2 item level 3 item | level 3 item | . | . | level 1 item level 2 item | level 2 item | level 2 item | . | level 1 item level 2 item | level 2 item | . | level 1 item | . Nesting an ol in ul in an ol . level 1 item (ul) level 2 item (ol) | level 2 item (ol) level 3 item (ul) | level 3 item (ul) | . | | level 1 item (ul) level 2 item (ol) | level 2 item (ol) level 3 item (ul) | level 3 item (ul) | . | level 4 item (ol) | level 4 item (ol) level 3 item (ul) | level 3 item (ul) | . | | level 1 item (ul) | . And a task list . Hello, this is a TODO item | Hello, this is another TODO item | Goodbye, this item is done | . Small image . . Large image . . Definition lists can be used with HTML syntax. . Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. . The final element. .",
    "url": "http://localhost:4000/docs/jekyll/index-test.html",
    "relUrl": "/docs/jekyll/index-test.html"
  }
  ,"23": {
    "title": "Home",
    "content": "今井研 ML班 新人研修2020 . 慶應義塾大学理工学部情報工学科今井研究室の新B4向け研修に使われるドキュメントです． このサイトは，今井研究室の学生によって運営・管理されています． . About . 人工知能研究の一分野である統計的推論・機械学習に関する学生のリテラシー向上．具体的には以下を満たすようなコンテンツを目指す． . 機械学習でできること・できないことを理解する | 頻出用語の定義を理解し，説明することができる | 論文を読み，要旨を理解することができる | 論文を読み，再現実装することができる． | Schedule . 2/24(月) 午前10:30-12:30：生活講座(yoshino)，環境構築(otsuka) | 午後13:30-18:00：Bash, Git, Docker, LaTeX(uchiumi) | . | 2/25(火) 午前10:30-12:30：Python(otake)，Python演習(kaneshige) | 午後13:30-18:00：C/Pythonによる文字列処理・ソケット通信(otsuka) | . | 2/26(水) 午前10:30-12:30：ゼロから作るDeepLearning(uchiumi) | 午後13:30-18:00：MLのためのGPUマシン環境構築(uchiumi) | . | 2/27(木) 終日10:30-18:00：NLP基礎(otake) | . | 2/28(金) 終日10:30-18:00：NLP演習(SCAIN班) | . | 3/03(火) 終日10:30-18:00：ML演習(ML班) | . | 3/04(水) 予備日 | . | 3/05(木) 午前10:30-12:00：General Meeting | 午後13:30-15:00：教育輪講割り当て(B4) | 午後15:00-18:00：研究グループ紹介(All) | . | . News . 2020/02/03 - サイト作成 | 2020/02/11 - ホスティング開始 | . Links . 今井研ホームページ https://www.ailab.ics.keio.ac.jp . | 今井研Github https://github.com/imai-laboratory . | 今井研Twitter https://twitter.com/imailab . | 今井研B3向けページ http://www.ailab.ics.keio.ac.jp/welcome-junior . | michiTimes https://github.com/imai-laboratory/michiTimes/issues . | .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"24": {
    "title": "Jekyll",
    "content": "For developers . To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. .",
    "url": "http://localhost:4000/docs/jekyll",
    "relUrl": "/docs/jekyll"
  }
  ,"25": {
    "title": "Labels",
    "content": "Labels . Use labels as a way to add an additional mark to a section of your docs. Labels come in a few colors. By default, labels will be blue. . Default label . Blue label . Stable . New release . Coming soon . Deprecated . Default label {: .label } Blue label {: .label .label-blue } Stable {: .label .label-green } New release {: .label .label-purple } Coming soon {: .label .label-yellow } Deprecated {: .label .label-red } .",
    "url": "http://localhost:4000/docs/jekyll/ui-components/labels.html",
    "relUrl": "/docs/jekyll/ui-components/labels.html"
  }
  ,"26": {
    "title": "Layout",
    "content": "Layout Utilities . . Spacing | Vertical Alignment | Display | . Spacing . These spacers are available to use for margins and padding with responsive utility classes. Combine these prefixes with a screen size and spacing scale to use them responsively. . Classname prefix What it does . .m- | margin | . .mx- | margin-left, margin-right | . .my- | margin top, margin bottom | . .mt- | margin-top | . .mr- | margin-right | . .mb- | margin-bottom | . .ml- | margin-left | . Classname prefix What it does . .p- | padding | . .px- | padding-left, padding-right | . .py- | padding top, padding bottom | . .pt- | padding-top | . .pr- | padding-right | . .pb- | padding-bottom | . .pl- | padding-left | . Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: . Spacer/suffix Size in rems Rem converted to px . 1 | 0.25rem | 4px | . 2 | 0.5rem | 8px | . 3 | 0.75rem | 12px | . 4 | 1rem | 16px | . 5 | 1.5rem | 24px | . 6 | 2rem | 32px | . 7 | 2.5rem | 40px | . 8 | 3rem | 48px | . Examples . In Markdown, use the {: } wrapper to apply custom classes: . This paragraph will have a margin bottom of 1rem/16px at large screens. {: .mb-lg-4 } This paragraph will have 2rem/32px of padding on the right and left at all screen sizes. {: .px-6 } . Vertical Alignment . Classname What it does . .v-align-baseline | vertical-align: baseline | . .v-align-bottom | vertical-align: bottom | . .v-align-middle | vertical-align: middle | . .v-align-text-bottom | vertical-align: text-bottom | . .v-align-text-top | vertical-align: text-top | . .v-align-top | vertical-align: top | . Display . Display classes aid in adapting the layout of the elements on a page: . Class   . .d-block | display: block | . .d-flex | display: flex | . .d-inline | display: inline | . .d-inline-block | display: inline-block | . .d-none | display: none | . Use these classes in conjunction with the responsive modifiers. . Examples . In Markdown, use the {: } wrapper to apply custom classes: . This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block } .",
    "url": "http://localhost:4000/docs/jekyll/utilities/layout.html",
    "relUrl": "/docs/jekyll/utilities/layout.html"
  }
  ,"27": {
    "title": "Lists",
    "content": "Lists . . Unordered list | Ordered list | Task list | Definition list | . Most lists can be rendered with pure Markdown. . Unordered list . Item 1 | Item 2 | Item 3 | . or . Item 1 | Item 2 | Item 3 | . - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 . Ordered list . Item 1 | Item 2 | Item 3 | 1. Item 1 1. Item 2 1. Item 3 . Task list . hello, this is a todo item | hello, this is another todo item | goodbye, this item is done | . - [ ] hello, this is a todo item - [ ] hello, this is another todo item - [x] goodbye, this item is done . Definition list . Definition lists require HTML syntax and aren’t supported with the GitHub Flavored Markdown compiler. . Name Godzilla Born 1952 Birthplace Japan Color Green &lt;dl&gt; &lt;dt&gt;Name&lt;/dt&gt; &lt;dd&gt;Godzilla&lt;/dd&gt; &lt;dt&gt;Born&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;Birthplace&lt;/dt&gt; &lt;dd&gt;Japan&lt;/dd&gt; &lt;dt&gt;Color&lt;/dt&gt; &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt; .",
    "url": "http://localhost:4000/docs/jekyll/ui-components/lists.html",
    "relUrl": "/docs/jekyll/ui-components/lists.html"
  }
  ,"28": {
    "title": "機械学習",
    "content": "機械学習 . 機械学習入門です． .",
    "url": "http://localhost:4000/docs/ml",
    "relUrl": "/docs/ml"
  }
  ,"29": {
    "title": "Navigation Structure",
    "content": "Navigation Structure . . Main navigation | Ordering pages | Excluding pages | Pages with children Child pages | Auto-generating Table of Contents | Children with children | | Auxiliary Navigation | In-page navigation with Table of Contents | . Main navigation . The main navigation for your Just the Docs site is on the left side of the page at large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). . By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). . . Ordering pages . To specify a page order, use the nav_order parameter in your pages’ YAML front matter. . Example . layout: default title: Customization nav_order: 4 . . Excluding pages . For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. . Example . layout: default title: 404 nav_exclude: true . . Pages with children . Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: . +-- .. |-- (Jekyll files) | |-- docs | |-- ui-components | | |-- index.md (parent page) | | |-- buttons.md | | |-- code.md | | |-- labels.md | | |-- tables.md | | +-- typography.md | | | |-- utilities | | |-- index.md (parent page) | | |-- color.md | | |-- layout.md | | |-- responsive-modifiers.md | | +-- typography.md | | | |-- (other md files, pages with no children) | +-- .. | |-- (Jekyll files) +-- .. . On the parent pages, add this YAML front matter parameter: . has_children: true (tells us that this is a parent page) | . Example . layout: default title: UI Components nav_order: 2 has_children: true . Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. . Child pages . On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). . Example . layout: default title: Buttons parent: UI Components nav_order: 2 . The Buttons page appears as a child of UI Components and appears second in the UI Components section. . Auto-generating Table of Contents . By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. . Example . layout: default title: UI Components nav_order: 2 has_children: true has_toc: false . Children with children . Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. . Add the has_children attribute to the child | Add the parent and grand_parent attribute to the grandchild | Example . layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true . layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 . This would create the following navigation structure: . +-- .. | |-- UI Components | |-- .. | | | |-- Buttons | | |-- Button Child Page | | | |-- .. | +-- .. . . Auxiliary Navigation . To add a auxiliary navigation item to your site (in the upper right on all pages), add it to the aux_nav configuration option in your site’s _config.yml file. . Example . # Aux links for the upper right navigation aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/pmarsceill/just-the-docs&quot; . . In-page navigation with Table of Contents . To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. . Example . # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} . This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself. .",
    "url": "http://localhost:4000/docs/jekyll/navigation-structure.html",
    "relUrl": "/docs/jekyll/navigation-structure.html"
  }
  ,"30": {
    "title": "NVIDIA GPU",
    "content": "NVIDIA GPU . 機械学習を円滑に楽しむためのNVIDIA GPU搭載Linuxマシンの環境構築． .",
    "url": "http://localhost:4000/docs/nvidia-gpu",
    "relUrl": "/docs/nvidia-gpu"
  }
  ,"31": {
    "title": "Python",
    "content": "Python入門 . Python入門です． .",
    "url": "http://localhost:4000/docs/python",
    "relUrl": "/docs/python"
  }
  ,"32": {
    "title": "強化学習の文献紹介",
    "content": "強化学習を学びたい方向けの文献紹介 . サーベイ論文&amp;書籍 . “Reinforcement Learning: A Survey” Leslie Pack Kaelbling et al., 1996 URL (PDF) . “Reinforcement Learning: An Introduction” (2nd Edition) Richard S. Sutton &amp; Andrew G. Barto, MIT Press, Cambridge, MA, 2018 by Prof. Sutton in UAlberta/Deepmind URL (PDF) . “Algorithms for Reinforcement Learning” Csaba Szepesvári, Morgan &amp; Claypool Publishers, 2009 by Prof. Szepesvári in UAlberta/Deepmind URL (PDF) . “An Introduction to Deep Reinforcement Learning” Joelle Pineau et al., now publishers, 2018 by Prof. Joelle Pineau in McGillU/FacebookAIlab URL (PDF) . ブログ記事 . “A (Long) Peek into Reinforcement Learning” by Lilian Weng (OpenAI) https://lilianweng.github.io/lil-log/2018/02/19/a-long-peek-into-reinforcement-learning.html#key-concepts . “Policy Gradient Algorithms” by Lilian Weng (OpenAI) https://lilianweng.github.io/lil-log/2018/04/08/policy-gradient-algorithms.html#what-is-policy-gradient . “Resources for Deep Reinforcement Learning” by Yuxi Li https://medium.com/@yuxili/resources-for-deep-reinforcement-learning-a5fdf2dc730f . “Awesome Reinforcement Learning” (Github) by Hyunsoo Kim and Jiwon Kim https://github.com/aikorea/awesome-rl . 公開されている大学の授業資料 . UCL Course on RL http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching.html . Deep Reinforcement Learning (CS 294-112 at UC Berkeley) http://rail.eecs.berkeley.edu/deeprlcourse/ . 著名な研究者 . Richard S. Sutton | Andrew Barto | Leslie Pack Kaelbling | Jürgen Schmidhuber | . その他 . “Reinforcement Learning Repository” http://www-anw.cs.umass.edu/rlr/ .",
    "url": "http://localhost:4000/docs/rl/references.html",
    "relUrl": "/docs/rl/references.html"
  }
  ,"33": {
    "title": "Responsive Modifiers",
    "content": "Responsive modifiers . Just the Docs spacing works in conjunction with a variety of modifiers that allow you to target specific screen sizes responsively. Use these in conjunction with spacing and display prefix and suffix classes. . Modifier Screen size . (none) | All screens until the next modifier | . xs | 320px (20rem) and up | . sm | 500px (31.25rem) and up | . md | 740px (46.25rem) and up | . lg | 1120px (70rem) and up | . xl | 1400px (87.5rem) and up | .",
    "url": "http://localhost:4000/docs/jekyll/utilities/responsive-modifiers.html",
    "relUrl": "/docs/jekyll/utilities/responsive-modifiers.html"
  }
  ,"34": {
    "title": "強化学習",
    "content": "強化学習 . 強化学習入門です． .",
    "url": "http://localhost:4000/docs/rl",
    "relUrl": "/docs/rl"
  }
  ,"35": {
    "title": "Search",
    "content": "Search . . Set up search Generate search index | Enable search in configuration | | Hiding pages from search | . Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: . Page title | Page content | Page URL | . Set up search . Generate search index . Before you can use search, you must initialize the feature by running this rake command that comes with just-the-docs: . $ bundle exec just-the-docs rake search:init . This command creates the search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually in the assets/js/ directory of your Jekyll site with this content: . {% raw %} { {% assign comma = false %} {% for page in site.html_pages %}{% if page.search_exclude != true %}{% if comma == true%},{% endif %}&quot;{{ forloop.index0 }}&quot;: { &quot;title&quot;: &quot;{{ page.title | replace: &#39;&amp;amp;&#39;, &#39;&amp;&#39; }}&quot;, &quot;content&quot;: &quot;{{ page.content | markdownify | replace: &#39;&lt;/h&#39;, &#39; . &lt;/h&#39; | replace: &#39;&lt;hr&#39;, &#39; . &lt;hr&#39; | replace: &#39;&lt;/p&#39;, &#39; . &lt;/p&#39; | replace: &#39;&lt;/ul&#39;, &#39; . &lt;/ul&#39; | replace: &#39;&lt;/tr&#39;, &#39; . &lt;/tr&#39; | replace: &#39;&lt;/li&#39;, &#39; | &lt;/li&#39; | replace: &#39;&lt;/td&#39;, &#39; | &lt;/td&#39; | strip_html | escape_once | remove: &#39;&#39; | remove: &#39;&#39; | remove: &#39;&#39; | replace: &#39; &#39;, &#39; &#39; | replace: &#39; . &#39;, &#39; . &#39; | replace: &#39; . &#39;, &#39; . &#39; | normalize_whitespace }}&quot;, &quot;url&quot;: &quot;{{ page.url | absolute_url }}&quot;, &quot;relUrl&quot;: &quot;{{ page.url }}&quot; }{% assign comma = true %} {% endif %}{% endfor %} }{% endraw %} . Note: If you don’t run this rake command or create this file manually, search will not work (or it will use the search index data from this docs site, not your site’s content). . Enable search in configuration . In your site’s _config.yml, enable search: . # Enable or disable the site search search_enabled: true . The default is for hyphens to separate tokens in search terms: gem-based is equivalent to gem based, matching either word. To allow search for hyphenated words: . # Set the search token separator search_tokenizer_separator: /[ s/]+/ . Hiding pages from search . Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g, a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: . Example . layout: default title: Page not found nav_exclude: true search_exclude: true .",
    "url": "http://localhost:4000/docs/jekyll/search.html",
    "relUrl": "/docs/jekyll/search.html"
  }
  ,"36": {
    "title": "確率・統計",
    "content": "確率・統計 . 統計学入門です． .",
    "url": "http://localhost:4000/docs/stat",
    "relUrl": "/docs/stat"
  }
  ,"37": {
    "title": "Tables",
    "content": "Tables . Tables are responsive by default, allowing wide tables to have a horizontal scroll to access columns outside of the normal viewport. . head1 head two three . ok | good swedish fish | nice | . out of stock | good and plenty | nice | . ok | good oreos | hmm | . ok | good zoute drop | yumm | . | head1 | head two | three | |:-|:|:| | ok | good swedish fish | nice | | out of stock | good and plenty | nice | | ok | good `oreos` | hmm | | ok | good `zoute` drop | yumm | .",
    "url": "http://localhost:4000/docs/jekyll/ui-components/tables.html",
    "relUrl": "/docs/jekyll/ui-components/tables.html"
  }
  ,"38": {
    "title": "TeX",
    "content": "TeX . TeXの紹介．文書をつくるやつ．「texファイルを記述→コンパイル→pdfができる」 という流れ．とりあえずやってみよう . TeXとは？ . TeX（テフ、テック）はDonald E. Knuth 氏により開発されているオープンソースの組版処理システムです．TeXベースのプロジェクトとしてLeslie Lamport氏によって開発されたLaTeXや，日本語用の機能を追加した TEX の一種であるpTeX (Publishing TeX) ，pLaTeX(Publishing LaTeX)があります . TeXは，標準的な論文執筆ツールとして世界中で使われており，さまざまな文章作成に用いることができます．今回は，MacにpLaTeXの環境を構築する手順を紹介します． . . TeXの導入 . https://prog-masaki.com/install-latex/ . 上記サイトを参考にしています． . まず．Homebrewでimagemagickとghostscriptをインストールしてください． . $ brew install imagemagick $ brew install ghostscript . 次に，LaTeXを使うためにTex Shopをインストールします． . 公式サイトMacTeX -Tex Shop | . このサイトの「MacTeX Download」をクリックして，「MacTex.pkg」ファイルを各自のMacbookにダウンロードしてください． . TeXShopを開き，「環境設定 &gt; 設定プロファイル」で「pTeX(ptex2pdf)」を選択してください． . . LaTeXサンプル . LaTeXファイルの記述 . texファイル「main.tex」を作成し，以下を記述してください． . documentclass[a5j]{jsarticle} begin{document} Hello World! end{document} . LaTeXファイルのコンパイル . 作成したtexファイルをPDFファイルへコンパイルします． . コマンドライン上でコンパイルする方法 | . $ platex main.tex # main.tex → main.dvi $ dvipdfmx main.dvi # main.dvi → main.pdf . . LaTeXの文法など . 基本 . LaTeXコマンド集 . http://www.latex-cmd.com/ . | 画像の出力 . https://texwiki.texjp.org/?LaTeX入門%2F図表 . | 表の出力 . http://www.latex-cmd.com/fig_tab/table01.html . | 章立て . https://medemanabu.net/latex/part-section-subsection/ . | . | . BibTeX . BibTexとは？ . 参考文献を簡単に管理するやつ . texファイルとは別にbibファイルを作ってそこに参考文献を記述 . 詳細はURLを参照 . BiBTeXとは - Quitta記事, 2019.01.24 | . ！コンパイル方法が特殊なので注意！ . . Q. 論文の出展とか調べるの面倒なんだけど？ . A. Google Scholarを使えばBibTeXの形式の出力が取れます． . . BiBTeXサンプル . 「ref.bib」ファイルに以下を記述してみましょう． . @article{imai2003physical, title={Physical relation and expression: Joint attention for human-robot interaction}, author={Imai, Michita and Ono, Tetsuo and Ishiguro, Hiroshi}, journal={IEEE Transactions on Industrial Electronics}, volume={50}, number={4}, pages={636--643}, year={2003}, publisher={IEEE} } . 「ref.bib」ファイルの記述した論文情報を元に，LaTeXファイル(.tex)に参考文献リストを出力することができます．以下の2行を参考文献を出力したい箇所に記述すればOK． . bibliography{ref} % ref.bibから拡張子を外した名前 bibliographystyle{junsrt} % 参考文献の出力スタイル . こんな感じ . documentclass[a5j]{jsarticle} begin{document} section{序論} Hello World! section{実験} % ref.bibの情報を元に，参考文献が自動で記述される． bibliography{ref} % ref.bibから拡張子を外した名前 bibliographystyle{junsrt} % 参考文献の出力スタイル end{document} . . pLaTeXとBiBTeXを同時にコンパイル . コマンドラインで . LaTeXファイル(main.tex)とBiBTeXファイル(ref.bib)を同期 | LaTeXファイル(main.tex)からPDFファイル(main.pdf)へコンパイル | プレビュー(Mac標準搭載)でPDFファイル(main.pdf)を開く | を一括実行するために，シェルスクリプト「compile.sh」を記述してみましょう． . # tex to dvi platex main.tex # attach bib pbibtex main # tex to dvi platex main.tex platex main.tex platex main.tex # dvi to pdf dvipdfmx main.dvi # open Preview app open -a Preview main.pdf . 実行 . $ bash compile.sh . . サンプルコード . Github: https://github.com/imai-laboratory/b4_induction_training/tree/master/docs/tex/sample に，LaTeXのサンプルコードがあります． . main.tex：LaTeXで書かれた本文 | compile.sh：main.texをコンパイルしてmain.pdfを作成するシェルスクリプト | .",
    "url": "http://localhost:4000/docs/tex",
    "relUrl": "/docs/tex"
  }
  ,"39": {
    "title": "Titanic data science solutions",
    "content": "Titanic data science solutions [日本語訳] . {% jupyter_notebook “titanic_data_science_solutions_jp.ipynb” %} .",
    "url": "http://localhost:4000/docs/ml/titanic_dss.html",
    "relUrl": "/docs/ml/titanic_dss.html"
  }
  ,"40": {
    "title": "Typography",
    "content": "Typography Utilities . . Font size | Font weight | Line height | . Font size . Use the .fs-1 - .fs-10 to set an explicit font-size. . Class Small screen size font-size Large screen size font-size . .fs-1 | 9px | 10px | . .fs-2 | 11px | 12px | . .fs-3 | 12px | 14px | . .fs-4 | 14px | 16px | . .fs-5 | 16px | 18px | . .fs-6 | 18px | 24px | . .fs-7 | 24px | 32px | . .fs-8 | 32px | 38px | . .fs-9 | 38px | 42px | . .fs-10 | 42px | 48px | . Font size 1 . Font size 2 . Font size 3 . Font size 4 . Font size 5 . Font size 6 . Font size 7 . Font size 8 . Font size 9 . Font size 10 . In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } . Font weight . Use the .fw-300 - .fw-700 to set an explicit font-size. . Font weight 300 . Font weight 400 . Font weight 500 . Font weight 700 . In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } . Line height . Use the lh- classes to explicitly apply line height to text. . Class line-height value Notes . .lh-0 | 0 |   | . .lh-tight | 1.1 | Default for headings | . .lh-default | 1.4 | Default for body (paragraphs) | . No Line height No Line height . Tight line height Tight line height . Default line height Default line height . In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default } .",
    "url": "http://localhost:4000/docs/jekyll/utilities/typography.html",
    "relUrl": "/docs/jekyll/utilities/typography.html"
  }
  ,"41": {
    "title": "Typography",
    "content": "Typography . . Font stack | Responsive type scale | Headings | Body text | Inline elements | Typographic Utilities | . Font stack . By default, Just the Docs uses a native system font stack for sans-serif fonts: . -apple-system, BlinkMacSystemFont, &quot;helvetica neue&quot;, helvetica, roboto, noto, &quot;segoe ui&quot;, arial, sans-serif . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . For monospace type, like code snippets or the &lt;pre&gt; element, Just the Docs uses a native system font stack for monospace fonts: . &quot;SFMono-Regular&quot;, Menlo, Consolas, Monospace . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . . Responsive type scale . Just the Docs uses a responsive type scale that shifts depending on the viewport size. . Selector Small screen size font-size Large screen size font-size . h1, .text-alpha | 32px | 36px | . h2, .text-beta | 18px | 24px | . h3, .text-gamma | 16px | 18px | . h4, .text-delta | 14px | 16px | . h5, .text-epsilon | 16px | 18px | . h6, .text-zeta | 18px | 24px | . body | 14px | 16px | . . Headings . Headings are rendered like this: . Heading 1 . Heading 2 . Heading 3 . Heading 4 . Heading 5 . Heading 6 . # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 . . Body text . Default body text is rendered like this: . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . . Inline elements . Text can be bold, italic, or strikethrough. . Link to another page. . Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). . . Typographic Utilities . There are a number of specific typographic CSS classes that allow you to override default styling for font size, font weight, line height, and capitalization. . View typography utilities .",
    "url": "http://localhost:4000/docs/jekyll/ui-components/typography.html",
    "relUrl": "/docs/jekyll/ui-components/typography.html"
  }
  ,"42": {
    "title": "Ubuntu環境",
    "content": "Ubuntuマシン . 機械学習のためのGPUマシン環境構築 . クリーンブートしたUbuntu16.04LTS マシンに，NVIDIA GPUを導入し，CuDA・cuDNNをセットアップする手順を記します．自分の使っているマシンの情報を把握することで，エラー解決に繋がります． . 例：筆者が使用しているUbuntuマシン，2020/01/10時点 . OS : Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-145-generic x86_64) | RAM : 16 GB | CPU(x8) : Intel Core i7-6700 CPU @ 3.40GHz | GPU(x1) : NVIDIA Geforce GTX 1080 NVIDIA CUDA : 10.0.130 (/usr/local/cuda-10.0/) | NVIDIA cuDNN : 7.4.2.24 (/usr/lib/x86_64-linux-gnu/libcudnn.so.7.4.2) | Python3 : 3.6.9 (/usr/bin/python3.6) | Python2 : 2.7.12 (/usr/bin/python) tensorflow 1.13.1 ($HOME/.local/lib/python3.6/site-packages) | tensorflow-gpu 1.13.1 ($HOME/.local/lib/python3.6/site-packages) | keras 2.2.4 ($HOME/.local/lib/python3.6/site-packages) | pytorch 1.2.0 ($HOME/.local/lib/python3.6/site-packages) | . | . | . . オペレーティングシステム（OS） . OSを確認したい . unameコマンドを使う . 「OS名,ホスト名,OSリリース,OSバージョン,マシンアーキテクチャ,CPUタイプ,プラットフォーム,OS名」が順に表示される． . $ uname -a Linux XXXX 4.4.0-145-generic #171-Ubuntu SMP Tue Mar 26 12:43:40 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux . Linuxディストリビューションを確認したい . /etc/issueファイルをみる . $ cat /etc/issue Ubuntu 16.04.6 LTS n l . /etc/lsb-releaseをみる . $ cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=16.04 DISTRIB_CODENAME=xenial DISTRIB_DESCRIPTION=&quot;Ubuntu 16.04.6 LTS&quot; . /etc/os-releaseをみる . $ cat /etc/os-release NAME=“Ubuntu” VERSION=“16.04.6 LTS (Xenial Xerus)” ID=ubuntu ID_LIKE=debian PRETTY_NAME=“Ubuntu 16.04.6 LTS” VERSION_ID=“16.04&quot; HOME_URL=“http://www.ubuntu.com/” . Linuxカーネルを確認したい . /proc/versionをみる . $ cat /proc/version Linux version 4.4.0-159-generic (buildd@lgw01-amd64-042) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) ) #187-Ubuntu SMP Thu Aug 1 16:28:06 UTC 2019 . ストレージ（ROM） . ストレージデバイス（HDD, SSD）とファイルシステムまわりについて． . HDDの状態を確認したい . df -hコマンドを使う . $ df -h Filesystem Size Used Avail Use% Mounted on udev 7.8G 0 7.8G 0% /dev tmpfs 1.6G 46M 1.6G 3% /run /dev/sda1 214G 165G 39G 81% / tmpfs 7.9G 208K 7.9G 1% /dev/shm tmpfs 5.0M 4.0K 5.0M 1% /run/lock tmpfs 7.9G 0 7.9G 0% /sys/fs/cgroup /dev/loop3 384K 384K 0 100% /snap/patchelf/93 /dev/loop1 384K 384K 0 100% /snap/patchelf/87 none 7.9G 2.5M 7.9G 1% /tmp/guest-qyuodw tmpfs 1.6G 64K 1.6G 1% /run/user/998 /dev/loop4 90M 90M 0 100% /snap/core/8213 /dev/loop0 90M 90M 0 100% /snap/core/8268 tmpfs 1.6G 0 1.6G 0% /run/user/1001 . ファイル数を確認したい . wcコマンドを使う . カレントディレクトリ直下にあるファイル数を表示する . $ ls -1 | wc -l 20 . ファイルのディスク使用量を確認したい . df -hコマンドを使う . カレントディレクトリ直下にあるファイルおよびディレクトリのディスク使用量とその合計を表示する . $ du -hsc * 689M Research 4.0K build 106M dataset 4.0K docker 9.3M gym 50M kaggle 2.6M latent.gif 2.0G opencv 122G workspace 4.0K ダウンロード 4.0K テンプレート 4.0K デスクトップ 4.0K ドキュメント 4.0K ビデオ 4.0K ピクチャ 4.0K ミュージック 4.0K 公開 125G 合計 . メモリ（RAM） . メモリデバイスを確認したい . /proc/meminfoをみる . メモリの詳細情報が表示される . $ cat /proc/meminfo MemTotal: 16377200 kB MemFree: 3077848 kB MemAvailable: 15767804 kB Buffers: 363052 kB Cached: 12274992 kB SwapCached: 66936 kB Active: 8048088 kB Inactive: 4689560 kB Active(anon): 25860 kB Inactive(anon): 86584 kB ... HugePages_Total: 0 HugePages_Free: 0 HugePages_Rsvd: 0 HugePages_Surp: 0 Hugepagesize: 2048 kB DirectMap4k: 1907316 kB DirectMap2M: 14815232 kB DirectMap1G: 0 kB . メモリの空き容量を確認したい . freeコマンドを使う . $ free total used free shared buff/cache available Mem: 16377148 2470228 314496 17140 13592424 13460232 Swap: 16720892 431568 16289324 . vmstatコマンドを使う . $ vmstat procs --memory- swap-- --io- -system-- cpu-- r b swpd free buff cache si so bi bo in cs us sy id wa st 1 0 431584 267696 944212 12638044 0 2 389 15 0 0 6 2 91 0 0 . topコマンドを使う . $ top top - 15:55:05 up 64 days, 23:12, 5 users, load average: 1.00, 1.04, 1.07 Tasks: 232 total, 2 running, 230 sleeping, 0 stopped, 0 zombie %Cpu(s): 9.1 us, 3.5 sy, 0.0 ni, 86.9 id, 0.5 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 16377148 total, 271964 free, 2527528 used, 13577656 buff/cache KiB Swap: 16720892 total, 16289228 free, 431664 used. 13403420 avail Mem ... . CPU . CPUデバイスを確認したい . /proc/cpuinfoをみる . CPUのコアごとに詳細情報が表示される . $ cat /proc/cpuinfo processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 94 model name : Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz stepping : 3 microcode : 0xc6 cpu MHz : 800.062 cache size : 8192 KB physical id : 0 siblings : 8 ... processor : 1 vendor_id : GenuineIntel cpu family : 6 model : 94 model name : Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz ... . . GPU . GPUデバイスの確認 . lswsコマンドを使う . $ sudo lshw -C display *-display 詳細: VGA compatible controller 製品: GP104 [GeForce GTX 1080] ベンダー: NVIDIA Corporation 物理ID: 0 バス情報: pci@0000:01:00.0 バージョン: a1 幅: 64 bits クロック: 33MHz 性能: pm msi pciexpress vga_controller bus_master cap_list rom 設定: driver=nvidia latency=0 リソース: irq:317 メモリー:de000000-deffffff メモリー:c0000000-cfffffff メモリー:d0000000-d1ffffff IOポート:e000(サイズ=128) メモリー:df000000-df07ffff . lspciコマンドを使う . Linuxに搭載されているPCIバスの情報を表示する． . $ lspci | grep -i nvidia 01:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1) 01:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1) .",
    "url": "http://localhost:4000/docs/nvidia-gpu/ubuntu.html",
    "relUrl": "/docs/nvidia-gpu/ubuntu.html"
  }
  ,"43": {
    "title": "UI Components",
    "content": "UI Components . To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. .",
    "url": "http://localhost:4000/docs/jekyll/ui-components",
    "relUrl": "/docs/jekyll/ui-components"
  }
  ,"44": {
    "title": "Utilities",
    "content": "Utilities . CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size. .",
    "url": "http://localhost:4000/docs/jekyll/utilities",
    "relUrl": "/docs/jekyll/utilities"
  }
  
}